#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_MOUSE_POINTING_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        back {
            bindings = <&kp F15>;
            key-positions = <31 32>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <7 8>;
        };

        mb3 {
            bindings = <&mkp MB3>;
            key-positions = <24 25>;
            layers = <0>;
        };

        shiftz {
            bindings = <&kp LS(Z)>;
            key-positions = <22 23>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <20 19>;
        };

        mb2 {
            bindings = <&mkp MB2>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R     &kp T                                                                            &kp Y      &kp U  &lt 0 I      &kp O    &kp P
&mt LCTRL A       &kp S         &kp D         &kp F     &kp G                   &mkp MB2                         &kp LG(LS(SPACE))       &kp H      &kp J  &kp K        &kp L    &mt RCTRL MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V     &kp B                   &kp LEFT_BRACKET                 &kp RIGHT_BRACKET       &kp N      &kp M  &lt 4 COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_ALT  &kp LEFT_GUI  &mkp MB1  &lt_to_layer_0 3 LANG2  &lt_to_layer_0 2 LANGUAGE_1      &lt_to_layer_0 1 SPACE  &kp ENTER                               &mt RCTRL ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp LG(MINUS) LG(PLUS)>;
        };

        FUNCTION {
            bindings = <
&kp F1   &kp F2   &kp F3   &kp F4   &kp F5                                                           &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F11  &kp F12  &kp F13  &kp F14  &trans  &trans                        &trans                     &trans  &trans  &trans  &trans  &trans
&trans   &trans   &trans   &trans   &trans  &kp LS(LG(LEFT_BRACKET))      &kp LS(LG(RIGHT_BRACKET))  &trans  &trans  &trans  &trans  &trans
&trans   &trans   &trans   &trans   &trans  &trans                        &trans                     &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        NUM {
            bindings = <
&trans  &trans        &kp LS(UP)    &trans         &trans                                                           &trans           &kp N7  &kp N8  &kp N9  &trans
&trans  &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT)  &trans  &trans                        &trans                     &trans           &kp N4  &kp N5  &kp N6  &trans
&trans  &trans        &trans        &trans         &trans  &kp LS(LG(LEFT_BRACKET))      &kp LS(LG(RIGHT_BRACKET))  &kp KP_NUMBER_0  &kp N1  &kp N2  &kp N3  &trans
&trans  &trans        &trans        &trans         &trans  &trans                        &trans                     &kp NUMBER_0                             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        special {
            bindings = <
&kp EXCL      &kp DOUBLE_QUOTES  &kp HASH   &kp DOLLAR  &kp PERCENT                                                             &kp AMPERSAND  &kp SINGLE_QUOTE  &kp LPAR        &kp RPAR          &kp PIPE
&kp QUESTION  &kp ASTERISK       &kp TILDE  &kp CARET   &kp AT         &trans                        &trans                     &kp MINUS      &kp COLON         &kp LEFT_BRACE  &kp RIGHT_BRACE   &kp GRAVE
&bt BT_SEL 1  &trans             &trans     &trans      &kp BACKSLASH  &kp LS(LG(LEFT_BRACKET))      &kp LS(LG(RIGHT_BRACKET))  &kp PLUS       &kp SEMICOLON     &kp LESS_THAN   &kp GREATER_THAN  &kp UNDERSCORE
&bt BT_SEL 0  &trans             &trans     &trans      &trans         &trans                        &trans                     &trans                                                             &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        other {
            bindings = <
&trans  &kp LS(F2)      &kp LS(SPACE)     &kp LS(F3)     &trans                             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp LS(LC(F5))  &kp LC(UP_ARROW)  &kp LS(F6)     &trans    &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp LC(LEFT)    &kp LC(DOWN)      &kp LC(RIGHT)  &trans    &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans          &trans            &trans         &mkp MB2  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
